"""
Leveled-graph experiment visuals (single chart)
- Requires: numpy, pandas, matplotlib
- Produces: 1 PNG (baseline vs leveled TOTAL) from the NEW results
- No seaborn. One chart per figure. Custom palette (avoids blue/orange).
"""

import os
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from cycler import cycler

# -----------------------------
# Output paths
# -----------------------------
OUTDIR = Path("figures")
OUTDIR.mkdir(parents=True, exist_ok=True)

# -----------------------------
# Global style (no blue/orange)
# -----------------------------
PALETTE = {
    "baseline":      "#7A1F1F",  # deep maroon
    "leveled_total": "#2E7D32",  # forest green
}

plt.rcParams.update({
    "figure.dpi": 200,
    "savefig.dpi": 240,
    "font.size": 11,
    "axes.titlesize": 13,
    "axes.labelsize": 12,
    "axes.linewidth": 1.0,
    "lines.linewidth": 2.2,
    "lines.markersize": 6.5,
    "legend.frameon": False,
    "axes.grid": True,
    "grid.linestyle": "--",
    "grid.alpha": 0.35,
    "axes.spines.top": False,
    "axes.spines.right": False,
    "axes.prop_cycle": cycler(color=[PALETTE["baseline"], PALETTE["leveled_total"]]),
})

def _fmt_int(x, _):
    try:
        return f"{int(x):,}"
    except Exception:
        return str(x)

ms_formatter = FuncFormatter(lambda y, _: f"{y:,.0f}")
int_formatter = FuncFormatter(_fmt_int)

def prettify_axes(ax, xlabel=None, ylabel=None, title=None, logy=False):
    if xlabel: ax.set_xlabel(xlabel, labelpad=6)
    if ylabel: ax.set_ylabel(ylabel, labelpad=6)
    if title:  ax.set_title(title, pad=10)
    ax.tick_params(axis="both", which="major", length=4, width=0.9)
    ax.tick_params(axis="both", which="minor", length=2, width=0.7)
    if logy:
        ax.set_yscale("log")
        ax.yaxis.set_major_formatter(ms_formatter)
    else:
        ax.yaxis.set_major_formatter(ms_formatter)
    ax.xaxis.set_major_formatter(int_formatter)

def mark_timeout_transition(ax, df, xcol="E", ycol="baseline_query_ms"):
    """
    Mark the LAST finite baseline point with an 'x' and annotate 'TIMEOUT'
    when subsequent baseline entries time out (NaN).
    """
    if not df[ycol].isna().any():
        return
    last_idx = df[ycol].last_valid_index()
    if last_idx is None:
        return
    x = df.loc[last_idx, xcol]
    y = df.loc[last_idx, ycol]
    ax.scatter([x], [y], marker="x", s=70, linewidths=2,
               color=PALETTE["baseline"], zorder=5)
    ax.annotate("TIMEOUT", xy=(x, y), xytext=(8, 8),
                textcoords="offset points", ha="left", va="bottom",
                fontsize=9, weight="bold", color=PALETTE["baseline"])

def savefig(fig, name: str):
    fig.tight_layout()
    out = OUTDIR / name
    fig.savefig(out, dpi=240, bbox_inches="tight")
    print(f"Saved: {out}")

# -----------------------------
# Data from your NEW results (|N|=100, repeats=10, timeout=10s)
# Columns:
#   E: edge count
#   baseline_query_ms: average baseline latency (NaN if all runs timed out)
#   leveled_build_ms: lifted (leveled) build time
#   leveled_query_ms: average leveled latency
# -----------------------------
# -----------------------------
# Data from your NEW results (|N|=100, repeats=10, timeout=10s)
# Columns:
#   E: edge count
#   baseline_query_ms: average baseline latency (NaN if all runs timed out)
#   leveled_build_ms: lifted (leveled) build time
#   leveled_query_ms: average leveled latency
# -----------------------------
data = {
    "E": [
        20, 40, 60, 80, 100, 120, 140, 160,
        180, 200, 220, 240, 260, 280, 300
    ],
    "baseline_query_ms": [
        9.257, 6.401, 6.904, 8.033, 12.438, 10.477,
        362.840, 1190.931, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, np.nan
    ],
    "leveled_build_ms": [
        57.112, 16.689, 11.702, 75.722, 16.374, 20.462,
        15.435, 15.040, 16.872, 22.990, 28.639,
        21.115, 80.382, 27.594, 16.282
    ],
    "leveled_query_ms": [
        9.948, 6.123, 6.188, 6.418, 7.611, 6.630,
        6.845, 6.993, 7.198, 7.149, 10.628,
        6.911, 7.134, 8.041, 7.808
    ],
}


df = pd.DataFrame(data)
df["leveled_total_ms"] = df["leveled_build_ms"] + df["leveled_query_ms"]

# -----------------------------
# Single figure: Baseline query vs Leveled TOTAL (log-y)
# -----------------------------
fig = plt.figure(figsize=(7.4, 5.2))
ax = plt.gca()

ax.plot(df["E"], df["baseline_query_ms"],
        marker="o", linewidth=2.2, label="Baseline query", color=PALETTE["baseline"])
ax.plot(df["E"], df["leveled_total_ms"],
        marker="s", linewidth=2.2, label="Leveled (build + query)", color=PALETTE["leveled_total"])

prettify_axes(
    ax,
    xlabel="# TRANSFER edges (E)",
    ylabel="Latency (ms)",
    title="Baseline Query vs Leveled Graph (build + query)",
    logy=True,
)
mark_timeout_transition(ax, df, "E", "baseline_query_ms")
ax.legend()

savefig(fig, "leveled_total_vs_baseline.png")
plt.show()
