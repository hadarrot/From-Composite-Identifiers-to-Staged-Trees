"""
StageLift experiment visuals
- Requires: numpy, pandas, matplotlib
- Produces: CSV + 3 PNGs (query latency, build time, speedup) for StageLift
- No seaborn. One chart per figure. Custom palette (avoids blue/orange).
"""

import os
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from cycler import cycler

# -----------------------------
# Output paths
# -----------------------------
OUTDIR = Path("figures")
OUTDIR.mkdir(parents=True, exist_ok=True)

# -----------------------------
# Global style (no blue/orange)
# -----------------------------
PALETTE = {
    "baseline":      "#7A1F1F",  # deep maroon
    "lifted":        "#2E7D32",  # forest green
    "orig_create":   "#6D4C41",  # warm brown
    "lifted_build":  "#37474F",  # charcoal
    "speedup":       "#8E24AA",  # rich magenta
}

plt.rcParams.update({
    "figure.dpi": 200,
    "savefig.dpi": 240,
    "font.size": 11,
    "axes.titlesize": 13,
    "axes.labelsize": 12,
    "axes.linewidth": 1.0,
    "lines.linewidth": 2.2,
    "lines.markersize": 6.5,
    "legend.frameon": False,
    "axes.grid": True,
    "grid.linestyle": "--",
    "grid.alpha": 0.35,
    "axes.spines.top": False,
    "axes.spines.right": False,
    "axes.prop_cycle": cycler(color=["#7A1F1F", "#2E7D32", "#6D4C41", "#37474F", "#8E24AA"]),
})

def _fmt_int(x, _):
    try:
        return f"{int(x):,}"
    except Exception:
        return str(x)

ms_formatter = FuncFormatter(lambda y, _: f"{y:,.0f}")
int_formatter = FuncFormatter(_fmt_int)

def prettify_axes(ax, xlabel=None, ylabel=None, title=None, logy=False):
    if xlabel: ax.set_xlabel(xlabel, labelpad=6)
    if ylabel: ax.set_ylabel(ylabel, labelpad=6)
    if title:  ax.set_title(title, pad=10)
    ax.tick_params(axis="both", which="major", length=4, width=0.9)
    ax.tick_params(axis="both", which="minor", length=2, width=0.7)
    if logy:
        ax.set_yscale("log")
        ax.yaxis.set_major_formatter(ms_formatter)
    else:
        ax.yaxis.set_major_formatter(ms_formatter)
    ax.xaxis.set_major_formatter(int_formatter)

def annotate_timeouts(ax, df, xcol="K", ycol="baseline_query_ms", label=""):
    """Annotate points where baseline is NaN (i.e., timed out)."""
    ax.relim(); ax.autoscale()
    ymin, ymax = ax.get_ylim()
    y_text = ymax * 0.85 if ymax > 0 else 1.0
    for _, row in df.iterrows():
        if pd.isna(row[ycol]):
            ax.annotate(label,
                        xy=(row[xcol], y_text),
                        xytext=(row[xcol], y_text),
                        rotation=90, ha="center", va="bottom",
                        fontsize=9)

def savefig(fig, name: str):
    fig.tight_layout()
    out = OUTDIR / name
    fig.savefig(out, dpi=240, bbox_inches="tight")
    print(f"Saved: {out}")

# -----------------------------
# StageLift data (100 accounts) — UPDATED WITH NEW RESULTS
# Columns: K, orig_create_ms, lifted_build_ms, baseline_query_ms (NaN if timeout), lifted_query_ms
# -----------------------------
stagelift_rows = [
    ( 50, 525,  705,   211,   100),
    ( 75, 289,  391,   173,    87),
    (100, 133,  490,   316,    90),
    (125, 146,  325,   444,    64),
    (150, 137,  996, 43248,   124),
    (175, 137, 1155,  8953,   111),
    (200, 299, 1022,    np.nan, 152),
    (225, 263,  919,    np.nan, 122),
    (250, 193,  485,    np.nan, 101),
    (275, 478,  713,    np.nan, 296),
    (300, 153,  447,    np.nan,  77),
    (325, 189,  442,    np.nan, 102),
    (350, 224,  480,    np.nan, 182),
    (375, 117,  309,    np.nan,  79),
    (400, 108,  213,    np.nan, 107),
]
stagelift = pd.DataFrame(stagelift_rows, columns=[
    "K", "orig_create_ms", "lifted_build_ms", "baseline_query_ms", "lifted_query_ms"
])

# ---- NEW: lifted total = build + query ----
stagelift["lifted_total_ms"] = stagelift["lifted_build_ms"] + stagelift["lifted_query_ms"]

# ---- NEW: speedup using lifted TOTAL (baseline / lifted_total) ----
stagelift["speedup_baseline_over_lifted_total"] = (
    stagelift["baseline_query_ms"] / stagelift["lifted_total_ms"]
)

# -----------------------------
# 1) Baseline query vs Lifted TOTAL (log-y)
# -----------------------------
fig = plt.figure(figsize=(7.4, 5.2))
ax = plt.gca()
ax.plot(stagelift["K"], stagelift["baseline_query_ms"],
        marker="o", linewidth=2.2, label="Baseline (original) query", color=PALETTE["baseline"])
ax.plot(stagelift["K"], stagelift["lifted_total_ms"],
        marker="s", linewidth=2.2, label="Lifted TOTAL (build + query)", color=PALETTE["lifted"])
prettify_axes(ax,
              xlabel="# TRANSFER edges (K)",
              ylabel="Latency (ms)",
              title="Baseline Query vs StageLift (build + query)",
              logy=True)
ax.legend()
annotate_timeouts(ax, stagelift, "K", "baseline_query_ms", label="")
savefig(fig, "stagelift_total_vs_baseline.png")
plt.show()

# -----------------------------
# 2) Build/Create time vs K
# -----------------------------
fig = plt.figure(figsize=(7.4, 5.2))
ax = plt.gca()
ax.plot(stagelift["K"], stagelift["orig_create_ms"],
        marker="o", linewidth=2.2, label="Original graph create", color=PALETTE["orig_create"])
ax.plot(stagelift["K"], stagelift["lifted_build_ms"],
        marker="s", linewidth=2.2, label="Lifted build (StageLift)", color=PALETTE["lifted_build"])
prettify_axes(ax,
              xlabel="# TRANSFER edges (K)",
              ylabel="Build/Create time (ms)",
              title="StageLift: Build/Create Time vs K",
              logy=False)
ax.legend()
savefig(fig, "stagelift_build_time.png")
plt.show()

# -----------------------------
# 3) Speedup vs K (baseline / lifted TOTAL)
# -----------------------------
fig = plt.figure(figsize=(7.4, 5.2))
ax = plt.gca()
ax.plot(stagelift["K"], stagelift["speedup_baseline_over_lifted_total"],
        marker="D", linewidth=2.2, label="Speedup (baseline / lifted TOTAL)", color=PALETTE["speedup"])
prettify_axes(ax,
              xlabel="# TRANSFER edges (K)",
              ylabel="Speedup (×)",
              title="Speedup vs K (baseline / lifted TOTAL)",
              logy=False)
ax.legend()
savefig(fig, "stagelift_speedup.png")
plt.show()

# -----------------------------
# Save CSV (includes lifted_total_ms and new speedup)
# -----------------------------
stagelift.to_csv(OUTDIR / "stagelift_results.csv", index=False)

print("\nSaved CSV to:", OUTDIR.resolve())
print("Files:", sorted(p.name for p in OUTDIR.iterdir()))
